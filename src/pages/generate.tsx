import { type NextPage } from "next";
import Head from "next/head";
import Input from "~/component/Input";
import { FormGroup } from "~/component/FormGroup";
import { useState } from "react";
import { api } from "~/utils/api";
import { Button } from "~/component/Button";
import { signIn, signOut, useSession } from "next-auth/react";
import Image from "next/image";
import useBuyCredits from "~/hooks/useBuyCredits";

const GeneratePage: NextPage = () => {
  const { buyCredits } = useBuyCredits();
  const [form, setForm] = useState({
    prompt: "",
  });
  const [imageUrl, setImageUrl] = useState("");
  //Calling trpc client with generateIcon procedure and useMutation
  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess({ imageUrl }) {
      setImageUrl(imageUrl);
    },
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    generateIcon.mutate({
      prompt: form.prompt,
    });
    setForm({
      prompt: "",
    });
  }

  function updateForm(key: string) {
    return (e: React.ChangeEvent<HTMLInputElement>) =>
      setForm((prev) => ({ ...prev, [key]: e.target.value }));
  }

  const session = useSession();
  const isLoggedIn = !!session.data;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        {!isLoggedIn && (
          <Button
            onClick={() => {
              signIn().catch(console.error);
            }}
          >
            Login
          </Button>
        )}
        {isLoggedIn && (
          <>
            <Button
              onClick={() => {
                buyCredits().catch(console.error);
              }}
            >
              Buy Credits
            </Button>
            <Button
              onClick={() => {
                signOut().catch(console.error);
              }}
            >
              Logout
            </Button>
          </>
        )}
        <form className="flex flex-col gap-4" onSubmit={handleFormSubmit}>
          <FormGroup>
            <label>Prompt</label>
            <Input value={form.prompt} onChange={updateForm("prompt")} />
          </FormGroup>
          <button
            type="submit"
            className="rounded bg-blue-400 px-4 py-2 hover:bg-blue-500"
          >
            Submit
          </button>
        </form>
        {imageUrl && (
          <Image
            src={imageUrl}
            alt="Some Random Icon"
            width={200}
            height={200}
            className="mt-10"
          />
        )}
      </main>
    </>
  );
};

export default GeneratePage;
